<<<<<<< HEAD
/**
 * CSS里的"C"代表了"层叠".该术语指示了应用于文档中任何给定元素的样式规则是各个"来源"的"层叠"效果
 * Web浏览器的默认样式表
 * 文档的样式表
 * 每个独立的HTML元素的style属性。
 * style属性中的样式覆盖了样式表中的样式，并且文档的样式表中的样式覆盖了浏览器的默认样式。
 */

 //使用CSS定位元素,CSS的position属性制定了应用到元素上的定位类型，如下是4个可能出现的属性值

/**
 * static:默认属性。指定元素按照常规的文档内容流(对多数西方语言而言就是从左往右，从上到下)进行定位。
 * 静态定位的元素不能使用top,left和类似其他属性定位。欲对文档元素使用CSS定位技术，必先将其position
 * 设置为除此之外的其他3个属性值。
 */

/**
 * absolute：该值指定元素是相对于它包含的元素进行定位。相对于所有其他元素，绝对定位的元素是独立定位的，
 * 它不是静态定位的元素中文档流的一部分。它的定位要么是相对于最近的定位祖先元素，要么是相对于文档本身。
 */

/**
 * fixed:该值指定元素是相对于浏览器窗口进行定位的。固定定位的元素总是显示在那里，不会随着文档其他部分滚动而
 * 滚动。类似于绝对定位的元素，固定定位的元素和所有其他的元素是独立的，它不是文档流的一部分，大多数现代浏览器
 * 支持固定定位，除了IE6.
 */

/**
 * 当position属性设置为relative，元素按照常规的文档流进行布局，它的定位相对于它文档流中的位置进行调整。系统保留着
 * 元素在正常文档流中的空间，不会因为要填充空间而将其各边合拢，也不会将元素从新的位置"推开".
 */

/**
 * 一旦设置了元素的position属性为除了static以外的值，就可以通过元素的left、top、right和bottom属性的一些组合指定元素的位置
 * 最常用的定位技术是使用left和top属性指定元素的左边缘到容器(通常是文档本身)左边缘的距离,元素的上边缘到容器上边缘的距离。
 * 例如，要放置一个距离文档左，上边缘个100像素的元素，可以在style属性中指定如下css样式。
 */

<div style="position:absolute;left:100px;top:100px"></div>

/**
 * 如果元素使用绝对定位，它的top和left属性应该解释为它是相对于其position属性设置为除static值以外的祖先元素。如果
 * 绝对定位的元素没有定位过的祖先，则它的top和left属性使用文档坐标进行度量---就是相对于文档左上角的偏移量。如果你想
 * 相对于一个属于常规文档流中的容器绝对定位一个元素，则将容器的position指定为relative，top和left指定为0.这就让容器变成了
 * 动态定位，但它仍留在文档中原来的位置。任何绝对定位元素的子元素都相对于容器定位。
 */

/**
 * 虽然使用left和top指定元素的左上角位置是最常见的定位方法。但也可以使用bottom和right指定元素相对于容器的下和右边缘进行定位。
 * 例如，让一个元素元素的右下角就在文档的右下角进行定位(假设元素没有嵌套在其他动态元素中)，使用如下样式:
 */
position:absolute;right:0;bottom:0;

/**
 * 定位一个元素让其右，上边缘相对于窗口右，上边缘各10个像素，并且不随文档的滚动而滚动，可以使用如下样式
 */
position:fixed;right:10px;top:10px

/**
 * 另外一种指定元素的宽度方法是同时指定left和right属性。同样，通过指定top和bottom属性来指定元素的高度。但是，如果同时指定left、right和width
 * 那么width属性将覆盖right属性;如果元素的高度重复限定，height属性优先于bottom属性。
 */

/**
 * 相对于使用上面的单位来指定绝对定位和尺寸，css也允许指定元素的位置和尺寸为其容器元素的百分比。
 */

/**
 * 如果z-index的值一样，它们按照在文档中出现的顺序绘制，也即最后一个重叠的元素显示在最上面。
 */

/**
 * z-index只对兄弟元素(如，同一个容器的子元素)应用堆叠效果，如果两个元素不是兄弟元素之间的重叠，那么设置它们的z-inde属性
 * 无法决定哪一个显示在最上面，相反,"必须"设置这两个重叠元素的兄弟容器的z-index属性来达到目的。
 */

 /**
  * 非定位元素(如,position:static)总是防止重叠的方式进行布局，因此z-index属性不会应用到它们上面。尽管如此，它们的z-index
  * 值为0，这意味着z-index为正值的定位元素显示在常规文档流的上面，而z-index为负值的定位元素显示在常规文档流下面。
  */

/**
 * CSS里的"C"代表了"层叠".该术语指示了应用于文档中任何给定元素的样式规则是各个"来源"的"层叠"效果
 * Web浏览器的默认样式表
 * 文档的样式表
 * 每个独立的HTML元素的style属性。
 * style属性中的样式覆盖了样式表中的样式，并且文档的样式表中的样式覆盖了浏览器的默认样式。
 */

 //使用CSS定位元素,CSS的position属性制定了应用到元素上的定位类型，如下是4个可能出现的属性值

/**
 * static:默认属性。指定元素按照常规的文档内容流(对多数西方语言而言就是从左往右，从上到下)进行定位。
 * 静态定位的元素不能使用top,left和类似其他属性定位。欲对文档元素使用CSS定位技术，必先将其position
 * 设置为除此之外的其他3个属性值。
 */

/**
 * absolute：该值指定元素是相对于它包含的元素进行定位。相对于所有其他元素，绝对定位的元素是独立定位的，
 * 它不是静态定位的元素中文档流的一部分。它的定位要么是相对于最近的定位祖先元素，要么是相对于文档本身。
 */

/**
 * fixed:该值指定元素是相对于浏览器窗口进行定位的。固定定位的元素总是显示在那里，不会随着文档其他部分滚动而
 * 滚动。类似于绝对定位的元素，固定定位的元素和所有其他的元素是独立的，它不是文档流的一部分，大多数现代浏览器
 * 支持固定定位，除了IE6.
 */

/**
 * 当position属性设置为relative，元素按照常规的文档流进行布局，它的定位相对于它文档流中的位置进行调整。系统保留着
 * 元素在正常文档流中的空间，不会因为要填充空间而将其各边合拢，也不会将元素从新的位置"推开".
 */

/**
 * 一旦设置了元素的position属性为除了static以外的值，就可以通过元素的left、top、right和bottom属性的一些组合指定元素的位置
 * 最常用的定位技术是使用left和top属性指定元素的左边缘到容器(通常是文档本身)左边缘的距离,元素的上边缘到容器上边缘的距离。
 * 例如，要放置一个距离文档左，上边缘个100像素的元素，可以在style属性中指定如下css样式。
 */

<div style="position:absolute;left:100px;top:100px"></div>

/**
 * 如果元素使用绝对定位，它的top和left属性应该解释为它是相对于其position属性设置为除static值以外的祖先元素。如果
 * 绝对定位的元素没有定位过的祖先，则它的top和left属性使用文档坐标进行度量---就是相对于文档左上角的偏移量。如果你想
 * 相对于一个属于常规文档流中的容器绝对定位一个元素，则将容器的position指定为relative，top和left指定为0.这就让容器变成了
 * 动态定位，但它仍留在文档中原来的位置。任何绝对定位元素的子元素都相对于容器定位。
 */

/**
 * 虽然使用left和top指定元素的左上角位置是最常见的定位方法。但也可以使用bottom和right指定元素相对于容器的下和右边缘进行定位。
 * 例如，让一个元素元素的右下角就在文档的右下角进行定位(假设元素没有嵌套在其他动态元素中)，使用如下样式:
 */
position:absolute;right:0;bottom:0;

/**
 * 定位一个元素让其右，上边缘相对于窗口右，上边缘各10个像素，并且不随文档的滚动而滚动，可以使用如下样式
 */
position:fixed;right:10px;top:10px

/**
* 另外一种指定元素的宽度方法是同时指定left和right属性。同样，通过指定top和bottom属性来指定元素的高度。但是，如果同时指定left、right和width
* 那么width属性将覆盖right属性;如果元素的高度重复限定，height属性优先于bottom属性。
*/

/**
 * CSS指定位置和大小属性是有单位的。在上面的例子中，定位和尺寸属性值以"px"结尾，代表像素。也可以使用英寸("in")
 * 厘米("cm")、点("pt")和字体行高("em",一种当前字体行高的度量)。
 */

/**
* 相对于使用上面的单位来指定绝对定位和尺寸，css也允许指定元素的位置和尺寸为其容器元素的百分比。
*/

/**
* 如果z-index的值一样，它们按照在文档中出现的顺序绘制，也即最后一个重叠的元素显示在最上面。
*/

/**
* z-index只对兄弟元素(如，同一个容器的子元素)应用堆叠效果，如果两个元素不是兄弟元素之间的重叠，那么设置它们的z-inde属性
* 无法决定哪一个显示在最上面，相反,"必须"设置这两个重叠元素的兄弟容器的z-index属性来达到目的。
*/

/**
 * 非定位元素(如,position:static)总是防止重叠的方式进行布局，因此z-index属性不会应用到它们上面。尽管如此，它们的z-index
 * 值为0，这意味着z-index为正值的定位元素显示在常规文档流的上面，而z-index为负值的定位元素显示在常规文档流下面。
 */

/**
 * 如何使用nodejs搭建一个本地服务，推荐：https://www.cnblogs.com/hld88/p/7259780.html
 * 在所在目录下输入npm install anywhere -g,安装完成后执行anywhere,会自动打开目录
 */

/**
 * 可以用margin和padding属性直接为元素所有的4条边指定外边距和内边距。首先指定上边的值，然后按照顺时针方式设置:
 * 上、右、下和左边的值。以下两种方式是等价的:
 */

padding:1px 2px 3px 4px
/**以上代码等价于以下4行代码 */
padding-top:1px;
padding-right:2px;
padding-bottom:3px;
padding-left:4px;

/**CSS盒模型：边框、内边距和定位属性 */
/**
 * width和height指定了元素内容区域的尺寸，它不包含元素的内边距或边框(或外边距)所需的任何额外空间。
 * 为了确定有边框元素在屏幕上的全尺寸，必须把元素的宽度加上左右两边的内边距和左右两个边框的宽度，把元素的高度加上上下两边的内边距和上下两个边框宽度。
 */

/**
 * left和top属性指定了从容器边框内侧到定位元素边框外侧的距离。这些属性不是从容器内容区域的左上角开始度量的，而是从容器内边距的左上角开始的。
 * 同样，right和bottom属性是从容器内边距的右下角开始度量的。
 */

/**边框盒模型和box-sizing属性 */
/**
 * 标准CSS盒模型规定width和height样式属性给定内容区域的尺寸，并且不包含内边距和边框。可以称此
 * 盒模型为"内容盒模型"。在老版的IE里和新版的CSS中都有一些例外，在IE6之前和当IE6-8在"怪异模式"
 * 下显示一个页面时(页面中缺少<!DOCTYPE>或有一个不严格的docttype时),width和height属性确是包含
 * 内边距和边框宽度的。IE的行为是一个bug，但是IE的非标准盒模型通常也很有用。认识到这一点，CSS3引进
 * 了box-sizing属性，默认值是content-box，它指定了上面描述的标准的盒模型。如果替换为box-sizing:border-box,
 * 浏览器将会那个元素应用IE的盒模型，即width和height属性将包含边框和内边距。当想以百分比形式为元素设置
 * 总体尺寸，又想以像素单位指定边框和内边距时，边框盒模型特别有用:
 */
<div style="box-sizing:border-box;width:50%;padding:10px;border:solid black 2px;"></div>

/**
 * box-sizing属性在当今所有的浏览器中都支持，但是还没有不带前缀通用地实现。在chrome和Safari中，使用
 * -webkit-box-sizing。在Firefox中，使用-moz-box-sizing。在Opera和IE及其更高版本中，可以使用不带前缀
 * 的box-sizing。
 */
/**边框盒模型在未来CSS3中的一个可选方案是使用盒子尺寸计算值 */
<div style="width:calc(50%-12px);padding:10px;border:solid black 2px"></div>

/**元素显示和可见性 */
/**
 * display属性更加通用，它用来为接受它的容器指定元素的显示类型。它指定元素是否是块元素，内联元素，列表项等
 * 但是，如果display设置为none，受影响的元素将不显示，设置根本没有布局。
 */

/**
 * visibility和display属性之间的差别可以从它们对使用静态或相对定位的元素的影响中看到。
 * 对于一个常规布局流中的元素，设置visibility属性为hidden使得元素不可见，但是在文档布局中
 * 仍保留了它的空间。类似的元素可以重复隐藏和显示而不改变文档布局。但是，如果元素的display
 * 属性设置为none，在endangered布局中不再给它分配空间，它个边的元素会合拢，就当它从来不存在。
 * 例如:在创建展开和折叠轮廓的效果时display属性很有用。
 */

/**
 * visibility和display属性对绝对和固定定位的元素的影响是等价的，因为这些元素都不是文档布局的一部分。
 * 然而，在隐藏和显示定位元素时一般首先visibility属性。
 */

/**
 * 用visibility和display属性使得元素不可见没什么意义，除非使用JavaScript动态设置这些属性让元素在某一刻课件。
 */

/**颜色、透明度和半透明度 */
/**
 * 指定元素(内容的前景和背景)为半透明也是可能的。用CSS3的opacity属性来处理，该属性值是0~1之间的数字，
 * 1代表100%不透明(默认值)，而0代表0%不透明(或100%透明)。opacity属性在当今所有的浏览器中都支持，除了IE。
 * IE体统类似的可选方式：IE特有的filter属性，让元素75%不透明，可以使用以下CSS样式:
 */
.opacity:.75/**透明度，CSS3标准属性 */
filter:alpha(opacity=75);/**IE透明度，注意没有小数点 */